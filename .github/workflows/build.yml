name: Cross-Platform Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU for cross compilation
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3

    - name: Build static binary for ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          DOCKER_PLATFORM="linux/amd64"
        else
          DOCKER_PLATFORM="linux/arm64"
        fi
        
        # Create a simple build script
        cat << 'EOF' > build-static.sh
        #!/bin/sh
        set -e
        
        # Install build dependencies
        apk add --no-cache \
            build-base cmake pkgconfig musl-dev \
            openssl-dev openssl-libs-static \
            curl-dev curl-static \
            libxml2-dev libxml2-static \
            zlib-dev zlib-static \
            nghttp2-dev nghttp2-static \
            brotli-dev brotli-static
        
        # Build with static linking
        mkdir -p build-static
        cd build-static
        
        LDFLAGS="-static" \
        CFLAGS="-static" \
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_EXE_LINKER_FLAGS="-static" \
              -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
              -DCMAKE_LINK_SEARCH_START_STATIC=1 \
              -DCMAKE_LINK_SEARCH_END_STATIC=1 \
              ..
        
        make -j$(nproc) || {
            echo "Static build failed, falling back to regular build"
            cd ..
            rm -rf build-static
            mkdir build-regular
            cd build-regular
            cmake -DCMAKE_BUILD_TYPE=Release ..
            make -j$(nproc)
            mv lpass ../lpass-linux-${{ matrix.arch }}
            exit 0
        }
        
        strip lpass
        
        # Test the binary
        ./lpass --version || echo "Binary test failed but file exists"
        file lpass
        ldd lpass 2>/dev/null || echo "No dynamic dependencies (static binary)"
        
        mv lpass ../lpass-linux-${{ matrix.arch }}
        EOF
        
        chmod +x build-static.sh
        
        docker run --rm --platform=$DOCKER_PLATFORM \
          -v ${{ github.workspace }}:/src \
          -w /src \
          alpine:3.22 ./build-static.sh

    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: lpass-linux-${{ matrix.arch }}
        path: lpass-linux-${{ matrix.arch }}

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew install cmake pkg-config openssl curl libxml2

    - name: Build for ${{ matrix.arch }}
      run: |
        export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig"
        export LDFLAGS="-L/opt/homebrew/lib -L/usr/local/lib"
        export CPPFLAGS="-I/opt/homebrew/include -I/usr/local/include"
        
        mkdir -p build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          CMAKE_ARCH_FLAGS="-DCMAKE_OSX_ARCHITECTURES=arm64"
        else
          CMAKE_ARCH_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
        fi
        
        cmake -DCMAKE_BUILD_TYPE=Release $CMAKE_ARCH_FLAGS ..
        make -j$(sysctl -n hw.ncpu)
        strip lpass
        mv lpass ../lpass-macos-${{ matrix.arch }}

    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: lpass-macos-${{ matrix.arch }}
        path: lpass-macos-${{ matrix.arch }}

  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86_64]  # ARM64 builds for Windows need special handling
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-openssl
          make

    - name: Build for Windows ${{ matrix.arch }}
      shell: msys2 {0}
      run: |
        mkdir -p build-win-${{ matrix.arch }}
        cd build-win-${{ matrix.arch }}
        cmake -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release ..
        make -j$(nproc)
        strip lpass.exe
        mv lpass.exe ../lpass-windows-${{ matrix.arch }}.exe

    - name: Upload Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: lpass-windows-${{ matrix.arch }}
        path: lpass-windows-${{ matrix.arch }}.exe

  create-release:
    name: Create Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release assets
      run: |
        # Create archives for each platform
        tar -czf lpass-linux-x86_64.tar.gz -C lpass-linux-x86_64 .
        tar -czf lpass-linux-arm64.tar.gz -C lpass-linux-arm64 .
        tar -czf lpass-macos-x86_64.tar.gz -C lpass-macos-x86_64 .
        tar -czf lpass-macos-arm64.tar.gz -C lpass-macos-arm64 .
        zip lpass-windows-x86_64.zip -j lpass-windows-x86_64/*

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          lpass-linux-x86_64.tar.gz
          lpass-linux-arm64.tar.gz
          lpass-macos-x86_64.tar.gz
          lpass-macos-arm64.tar.gz
          lpass-windows-x86_64.zip