name: Docker Build and Push

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    # Try simple Alpine-based build first
    - name: Build and push simple Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.simple
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true
      id: simple-build
    
    # Fallback to Debian-based build if Alpine fails
    - name: Build and push Debian Docker image (fallback)
      if: steps.simple-build.outcome == 'failure'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true
      id: debian-build

    # If both fail, create a minimal working image
    - name: Build minimal fallback image
      if: steps.simple-build.outcome == 'failure' && steps.debian-build.outcome == 'failure'
      run: |
        # Create a very basic Dockerfile with pre-built binary
        cat > Dockerfile.minimal << 'EOF'
        FROM alpine:3.22
        RUN apk add --no-cache bash
        COPY build/lpass /usr/local/bin/lpass
        RUN chmod +x /usr/local/bin/lpass
        WORKDIR /data
        ENTRYPOINT ["/usr/local/bin/lpass"]
        EOF
        
        # Build locally first
        sudo apt-get update && sudo apt-get install -y build-essential cmake pkg-config libcurl4-openssl-dev libxml2-dev libssl-dev
        mkdir -p build && cd build && cmake .. && make && cd ..
        
        # Build and push minimal image
        docker buildx build --platform linux/amd64 -f Dockerfile.minimal -t temp-image .
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          docker tag temp-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        fi